#!/usr/bin/env python
# _*_ coding: utf-8 _*_

"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Costs: 2015-01-08 13:31:42 - 2015-01-08 13:55:14
"""


def factors(n):
    result = []
    if n == 1:
        return 1
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            result.append(i)
            result.append(n/i)
    return len(result)


def nth_triangle_number(n):
    return sum(xrange(1, n+1))


def triangle_number_factors(n):
    result = 1
    counter = 1
    while True:
        triangle_number = nth_triangle_number(counter)
        tmp = factors(triangle_number)
        if tmp > n:
            result = triangle_number
            break
        counter += 1
    return result


def triangle_number_factors_cached(n):
    result = 1
    counter = 1
    cached_factors = {}
    while True:
        triangle_number = nth_triangle_number(counter)
        if triangle_number in cached_factors:
            tmp = cached_factors[triangle_number]
        else:
            tmp = factors(triangle_number)
            cached_factors[triangle_number] = tmp
        if tmp > n:
            result = triangle_number
            break
        counter += 1
    return result


if __name__ == '__main__':
    #print factors(1)
    #print factors(3)
    #print factors(28)
    import time
    start = time.time()
    result = triangle_number_factors(500)
    cost = time.time() - start
    print 'Not cached version time spends: ', cost, 'Result: ', result
    start_cached = time.time()
    result_cached = triangle_number_factors_cached(500)
    cost_cached = time.time() - start_cached
    print ('Cached version time spends: ', cost_cached, 'Result: ',
           result_cached)
