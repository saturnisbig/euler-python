#!/usr/bin/env python
# _*_ coding: utf-8 _*_


"""
Problem: Distinct powers
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats
removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

Costs: 2015-02-02 22:00:56 - 2015-02-02 22:15:56
"""


def find_distinct_powers(start, end):
    """
    >>> find_distinct_powers(2, 3)
    4
    >>> find_distinct_powers(2, 5)
    15
    """
    result = []
    counter = 0
    for a in xrange(start, end+1):
        for b in xrange(start, end+1):
            v = a**b
            if v not in result:
                result.append(v)
                counter += 1
    return counter


if __name__ == '__main__':
    print find_distinct_powers(2, 100)
    print len(set([a**b for a in xrange(2, 101) for b in xrange(2, 101)]))
